/* automatically generated by rust-bindgen */

#![feature(negate_unsigned)]

#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]
#![allow(dead_code)]

extern crate libc;

pub type __s8 = ::libc::c_char;
pub type __u8 = ::libc::c_uchar;
pub type __s16 = ::libc::c_short;
pub type __u16 = ::libc::c_ushort;
pub type __s32 = ::libc::c_int;
pub type __u32 = ::libc::c_uint;
pub type __s64 = ::libc::c_longlong;
pub type __u64 = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub fds_bits: [::libc::c_ulong; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fd_set = Struct_Unnamed1;
pub type __kernel_sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type __kernel_key_t = ::libc::c_int;
pub type __kernel_mqd_t = ::libc::c_int;
pub type __kernel_old_uid_t = ::libc::c_ushort;
pub type __kernel_old_gid_t = ::libc::c_ushort;
pub type __kernel_old_dev_t = ::libc::c_ulong;
pub type __kernel_long_t = ::libc::c_long;
pub type __kernel_ulong_t = ::libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::libc::c_uint;
pub type __kernel_pid_t = ::libc::c_int;
pub type __kernel_ipc_pid_t = ::libc::c_int;
pub type __kernel_uid_t = ::libc::c_uint;
pub type __kernel_gid_t = ::libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::libc::c_int;
pub type __kernel_uid32_t = ::libc::c_uint;
pub type __kernel_gid32_t = ::libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_fsid_t = Struct_Unnamed2;
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::libc::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::libc::c_int;
pub type __kernel_clockid_t = ::libc::c_int;
pub type __kernel_caddr_t = *mut ::libc::c_char;
pub type __kernel_uid16_t = ::libc::c_ushort;
pub type __kernel_gid16_t = ::libc::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: [::libc::c_char; 0usize],
}
impl ::std::clone::Clone for Struct_sysinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sysinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_sa_family_t = ::libc::c_ushort;
pub enum Struct_sockaddr { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___kernel_sockaddr_storage {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::libc::c_char; 126usize],
}
impl ::std::clone::Clone for Struct___kernel_sockaddr_storage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___kernel_sockaddr_storage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: ::libc::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
impl ::std::clone::Clone for Struct_sockaddr_nl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sockaddr_nl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
impl ::std::clone::Clone for Struct_nlmsghdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nlmsghdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nlmsgerr {
    pub error: ::libc::c_int,
    pub msg: Struct_nlmsghdr,
}
impl ::std::clone::Clone for Struct_nlmsgerr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nlmsgerr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl_pktinfo {
    pub group: __u32,
}
impl ::std::clone::Clone for Struct_nl_pktinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl_pktinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl_mmap_req {
    pub nm_block_size: ::libc::c_uint,
    pub nm_block_nr: ::libc::c_uint,
    pub nm_frame_size: ::libc::c_uint,
    pub nm_frame_nr: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_nl_mmap_req {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl_mmap_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nl_mmap_hdr {
    pub nm_status: ::libc::c_uint,
    pub nm_len: ::libc::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
impl ::std::clone::Clone for Struct_nl_mmap_hdr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nl_mmap_hdr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_nl_mmap_status = ::libc::c_uint;
pub const NL_MMAP_STATUS_UNUSED: ::libc::c_uint = 0;
pub const NL_MMAP_STATUS_RESERVED: ::libc::c_uint = 1;
pub const NL_MMAP_STATUS_VALID: ::libc::c_uint = 2;
pub const NL_MMAP_STATUS_COPY: ::libc::c_uint = 3;
pub const NL_MMAP_STATUS_SKIP: ::libc::c_uint = 4;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const NETLINK_UNCONNECTED: ::libc::c_uint = 0;
pub const NETLINK_CONNECTED: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
impl ::std::clone::Clone for Struct_nlattr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nlattr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtnl_link_stats {
    pub rx_packets: __u32,
    pub tx_packets: __u32,
    pub rx_bytes: __u32,
    pub tx_bytes: __u32,
    pub rx_errors: __u32,
    pub tx_errors: __u32,
    pub rx_dropped: __u32,
    pub tx_dropped: __u32,
    pub multicast: __u32,
    pub collisions: __u32,
    pub rx_length_errors: __u32,
    pub rx_over_errors: __u32,
    pub rx_crc_errors: __u32,
    pub rx_frame_errors: __u32,
    pub rx_fifo_errors: __u32,
    pub rx_missed_errors: __u32,
    pub tx_aborted_errors: __u32,
    pub tx_carrier_errors: __u32,
    pub tx_fifo_errors: __u32,
    pub tx_heartbeat_errors: __u32,
    pub tx_window_errors: __u32,
    pub rx_compressed: __u32,
    pub tx_compressed: __u32,
}
impl ::std::clone::Clone for Struct_rtnl_link_stats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtnl_link_stats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtnl_link_stats64 {
    pub rx_packets: __u64,
    pub tx_packets: __u64,
    pub rx_bytes: __u64,
    pub tx_bytes: __u64,
    pub rx_errors: __u64,
    pub tx_errors: __u64,
    pub rx_dropped: __u64,
    pub tx_dropped: __u64,
    pub multicast: __u64,
    pub collisions: __u64,
    pub rx_length_errors: __u64,
    pub rx_over_errors: __u64,
    pub rx_crc_errors: __u64,
    pub rx_frame_errors: __u64,
    pub rx_fifo_errors: __u64,
    pub rx_missed_errors: __u64,
    pub tx_aborted_errors: __u64,
    pub tx_carrier_errors: __u64,
    pub tx_fifo_errors: __u64,
    pub tx_heartbeat_errors: __u64,
    pub tx_window_errors: __u64,
    pub rx_compressed: __u64,
    pub tx_compressed: __u64,
}
impl ::std::clone::Clone for Struct_rtnl_link_stats64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtnl_link_stats64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtnl_link_ifmap {
    pub mem_start: __u64,
    pub mem_end: __u64,
    pub base_addr: __u64,
    pub irq: __u16,
    pub dma: __u8,
    pub port: __u8,
}
impl ::std::clone::Clone for Struct_rtnl_link_ifmap {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtnl_link_ifmap {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const IFLA_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_ADDRESS: ::libc::c_uint = 1;
pub const IFLA_BROADCAST: ::libc::c_uint = 2;
pub const IFLA_IFNAME: ::libc::c_uint = 3;
pub const IFLA_MTU: ::libc::c_uint = 4;
pub const IFLA_LINK: ::libc::c_uint = 5;
pub const IFLA_QDISC: ::libc::c_uint = 6;
pub const IFLA_STATS: ::libc::c_uint = 7;
pub const IFLA_COST: ::libc::c_uint = 8;
pub const IFLA_PRIORITY: ::libc::c_uint = 9;
pub const IFLA_MASTER: ::libc::c_uint = 10;
pub const IFLA_WIRELESS: ::libc::c_uint = 11;
pub const IFLA_PROTINFO: ::libc::c_uint = 12;
pub const IFLA_TXQLEN: ::libc::c_uint = 13;
pub const IFLA_MAP: ::libc::c_uint = 14;
pub const IFLA_WEIGHT: ::libc::c_uint = 15;
pub const IFLA_OPERSTATE: ::libc::c_uint = 16;
pub const IFLA_LINKMODE: ::libc::c_uint = 17;
pub const IFLA_LINKINFO: ::libc::c_uint = 18;
pub const IFLA_NET_NS_PID: ::libc::c_uint = 19;
pub const IFLA_IFALIAS: ::libc::c_uint = 20;
pub const IFLA_NUM_VF: ::libc::c_uint = 21;
pub const IFLA_VFINFO_LIST: ::libc::c_uint = 22;
pub const IFLA_STATS64: ::libc::c_uint = 23;
pub const IFLA_VF_PORTS: ::libc::c_uint = 24;
pub const IFLA_PORT_SELF: ::libc::c_uint = 25;
pub const IFLA_AF_SPEC: ::libc::c_uint = 26;
pub const IFLA_GROUP: ::libc::c_uint = 27;
pub const IFLA_NET_NS_FD: ::libc::c_uint = 28;
pub const IFLA_EXT_MASK: ::libc::c_uint = 29;
pub const IFLA_PROMISCUITY: ::libc::c_uint = 30;
pub const IFLA_NUM_TX_QUEUES: ::libc::c_uint = 31;
pub const IFLA_NUM_RX_QUEUES: ::libc::c_uint = 32;
pub const IFLA_CARRIER: ::libc::c_uint = 33;
pub const IFLA_PHYS_PORT_ID: ::libc::c_uint = 34;
pub const __IFLA_MAX: ::libc::c_uint = 35;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const IFLA_INET_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_INET_CONF: ::libc::c_uint = 1;
pub const __IFLA_INET_MAX: ::libc::c_uint = 2;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const IFLA_INET6_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_INET6_FLAGS: ::libc::c_uint = 1;
pub const IFLA_INET6_CONF: ::libc::c_uint = 2;
pub const IFLA_INET6_STATS: ::libc::c_uint = 3;
pub const IFLA_INET6_MCAST: ::libc::c_uint = 4;
pub const IFLA_INET6_CACHEINFO: ::libc::c_uint = 5;
pub const IFLA_INET6_ICMP6STATS: ::libc::c_uint = 6;
pub const IFLA_INET6_TOKEN: ::libc::c_uint = 7;
pub const __IFLA_INET6_MAX: ::libc::c_uint = 8;
pub type Enum_Unnamed7 = ::libc::c_uint;
pub const BRIDGE_MODE_UNSPEC: ::libc::c_uint = 0;
pub const BRIDGE_MODE_HAIRPIN: ::libc::c_uint = 1;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const IFLA_BRPORT_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_BRPORT_STATE: ::libc::c_uint = 1;
pub const IFLA_BRPORT_PRIORITY: ::libc::c_uint = 2;
pub const IFLA_BRPORT_COST: ::libc::c_uint = 3;
pub const IFLA_BRPORT_MODE: ::libc::c_uint = 4;
pub const IFLA_BRPORT_GUARD: ::libc::c_uint = 5;
pub const IFLA_BRPORT_PROTECT: ::libc::c_uint = 6;
pub const IFLA_BRPORT_FAST_LEAVE: ::libc::c_uint = 7;
pub const IFLA_BRPORT_LEARNING: ::libc::c_uint = 8;
pub const IFLA_BRPORT_UNICAST_FLOOD: ::libc::c_uint = 9;
pub const __IFLA_BRPORT_MAX: ::libc::c_uint = 10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_cacheinfo {
    pub max_reasm_len: __u32,
    pub tstamp: __u32,
    pub reachable_time: __u32,
    pub retrans_time: __u32,
}
impl ::std::clone::Clone for Struct_ifla_cacheinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_cacheinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const IFLA_INFO_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_INFO_KIND: ::libc::c_uint = 1;
pub const IFLA_INFO_DATA: ::libc::c_uint = 2;
pub const IFLA_INFO_XSTATS: ::libc::c_uint = 3;
pub const __IFLA_INFO_MAX: ::libc::c_uint = 4;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const IFLA_VLAN_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_VLAN_ID: ::libc::c_uint = 1;
pub const IFLA_VLAN_FLAGS: ::libc::c_uint = 2;
pub const IFLA_VLAN_EGRESS_QOS: ::libc::c_uint = 3;
pub const IFLA_VLAN_INGRESS_QOS: ::libc::c_uint = 4;
pub const IFLA_VLAN_PROTOCOL: ::libc::c_uint = 5;
pub const __IFLA_VLAN_MAX: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vlan_flags {
    pub flags: __u32,
    pub mask: __u32,
}
impl ::std::clone::Clone for Struct_ifla_vlan_flags {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vlan_flags {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const IFLA_VLAN_QOS_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_VLAN_QOS_MAPPING: ::libc::c_uint = 1;
pub const __IFLA_VLAN_QOS_MAX: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vlan_qos_mapping {
    pub from: __u32,
    pub to: __u32,
}
impl ::std::clone::Clone for Struct_ifla_vlan_qos_mapping {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vlan_qos_mapping {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const IFLA_MACVLAN_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_MACVLAN_MODE: ::libc::c_uint = 1;
pub const IFLA_MACVLAN_FLAGS: ::libc::c_uint = 2;
pub const __IFLA_MACVLAN_MAX: ::libc::c_uint = 3;
pub type Enum_macvlan_mode = ::libc::c_uint;
pub const MACVLAN_MODE_PRIVATE: ::libc::c_uint = 1;
pub const MACVLAN_MODE_VEPA: ::libc::c_uint = 2;
pub const MACVLAN_MODE_BRIDGE: ::libc::c_uint = 4;
pub const MACVLAN_MODE_PASSTHRU: ::libc::c_uint = 8;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const IFLA_VXLAN_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_VXLAN_ID: ::libc::c_uint = 1;
pub const IFLA_VXLAN_GROUP: ::libc::c_uint = 2;
pub const IFLA_VXLAN_LINK: ::libc::c_uint = 3;
pub const IFLA_VXLAN_LOCAL: ::libc::c_uint = 4;
pub const IFLA_VXLAN_TTL: ::libc::c_uint = 5;
pub const IFLA_VXLAN_TOS: ::libc::c_uint = 6;
pub const IFLA_VXLAN_LEARNING: ::libc::c_uint = 7;
pub const IFLA_VXLAN_AGEING: ::libc::c_uint = 8;
pub const IFLA_VXLAN_LIMIT: ::libc::c_uint = 9;
pub const IFLA_VXLAN_PORT_RANGE: ::libc::c_uint = 10;
pub const IFLA_VXLAN_PROXY: ::libc::c_uint = 11;
pub const IFLA_VXLAN_RSC: ::libc::c_uint = 12;
pub const IFLA_VXLAN_L2MISS: ::libc::c_uint = 13;
pub const IFLA_VXLAN_L3MISS: ::libc::c_uint = 14;
pub const IFLA_VXLAN_PORT: ::libc::c_uint = 15;
pub const IFLA_VXLAN_GROUP6: ::libc::c_uint = 16;
pub const IFLA_VXLAN_LOCAL6: ::libc::c_uint = 17;
pub const __IFLA_VXLAN_MAX: ::libc::c_uint = 18;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vxlan_port_range {
    pub low: __be16,
    pub high: __be16,
}
impl ::std::clone::Clone for Struct_ifla_vxlan_port_range {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vxlan_port_range {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const IFLA_BOND_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_BOND_MODE: ::libc::c_uint = 1;
pub const IFLA_BOND_ACTIVE_SLAVE: ::libc::c_uint = 2;
pub const __IFLA_BOND_MAX: ::libc::c_uint = 3;
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const IFLA_VF_INFO_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_VF_INFO: ::libc::c_uint = 1;
pub const __IFLA_VF_INFO_MAX: ::libc::c_uint = 2;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const IFLA_VF_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_VF_MAC: ::libc::c_uint = 1;
pub const IFLA_VF_VLAN: ::libc::c_uint = 2;
pub const IFLA_VF_TX_RATE: ::libc::c_uint = 3;
pub const IFLA_VF_SPOOFCHK: ::libc::c_uint = 4;
pub const IFLA_VF_LINK_STATE: ::libc::c_uint = 5;
pub const __IFLA_VF_MAX: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vf_mac {
    pub vf: __u32,
    pub mac: [__u8; 32usize],
}
impl ::std::clone::Clone for Struct_ifla_vf_mac {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vf_mac {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vf_vlan {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
}
impl ::std::clone::Clone for Struct_ifla_vf_vlan {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vf_vlan {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vf_tx_rate {
    pub vf: __u32,
    pub rate: __u32,
}
impl ::std::clone::Clone for Struct_ifla_vf_tx_rate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vf_tx_rate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vf_spoofchk {
    pub vf: __u32,
    pub setting: __u32,
}
impl ::std::clone::Clone for Struct_ifla_vf_spoofchk {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vf_spoofchk {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const IFLA_VF_LINK_STATE_AUTO: ::libc::c_uint = 0;
pub const IFLA_VF_LINK_STATE_ENABLE: ::libc::c_uint = 1;
pub const IFLA_VF_LINK_STATE_DISABLE: ::libc::c_uint = 2;
pub const __IFLA_VF_LINK_STATE_MAX: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_vf_link_state {
    pub vf: __u32,
    pub link_state: __u32,
}
impl ::std::clone::Clone for Struct_ifla_vf_link_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_vf_link_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const IFLA_VF_PORT_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_VF_PORT: ::libc::c_uint = 1;
pub const __IFLA_VF_PORT_MAX: ::libc::c_uint = 2;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const IFLA_PORT_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_PORT_VF: ::libc::c_uint = 1;
pub const IFLA_PORT_PROFILE: ::libc::c_uint = 2;
pub const IFLA_PORT_VSI_TYPE: ::libc::c_uint = 3;
pub const IFLA_PORT_INSTANCE_UUID: ::libc::c_uint = 4;
pub const IFLA_PORT_HOST_UUID: ::libc::c_uint = 5;
pub const IFLA_PORT_REQUEST: ::libc::c_uint = 6;
pub const IFLA_PORT_RESPONSE: ::libc::c_uint = 7;
pub const __IFLA_PORT_MAX: ::libc::c_uint = 8;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const PORT_REQUEST_PREASSOCIATE: ::libc::c_uint = 0;
pub const PORT_REQUEST_PREASSOCIATE_RR: ::libc::c_uint = 1;
pub const PORT_REQUEST_ASSOCIATE: ::libc::c_uint = 2;
pub const PORT_REQUEST_DISASSOCIATE: ::libc::c_uint = 3;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const PORT_VDP_RESPONSE_SUCCESS: ::libc::c_uint = 0;
pub const PORT_VDP_RESPONSE_INVALID_FORMAT: ::libc::c_uint = 1;
pub const PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: ::libc::c_uint = 2;
pub const PORT_VDP_RESPONSE_UNUSED_VTID: ::libc::c_uint = 3;
pub const PORT_VDP_RESPONSE_VTID_VIOLATION: ::libc::c_uint = 4;
pub const PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: ::libc::c_uint = 5;
pub const PORT_VDP_RESPONSE_OUT_OF_SYNC: ::libc::c_uint = 6;
pub const PORT_PROFILE_RESPONSE_SUCCESS: ::libc::c_uint = 256;
pub const PORT_PROFILE_RESPONSE_INPROGRESS: ::libc::c_uint = 257;
pub const PORT_PROFILE_RESPONSE_INVALID: ::libc::c_uint = 258;
pub const PORT_PROFILE_RESPONSE_BADSTATE: ::libc::c_uint = 259;
pub const PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: ::libc::c_uint = 260;
pub const PORT_PROFILE_RESPONSE_ERROR: ::libc::c_uint = 261;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifla_port_vsi {
    pub vsi_mgr_id: __u8,
    pub vsi_type_id: [__u8; 3usize],
    pub vsi_type_version: __u8,
    pub pad: [__u8; 3usize],
}
impl ::std::clone::Clone for Struct_ifla_port_vsi {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifla_port_vsi {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const IFLA_IPOIB_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_IPOIB_PKEY: ::libc::c_uint = 1;
pub const IFLA_IPOIB_MODE: ::libc::c_uint = 2;
pub const IFLA_IPOIB_UMCAST: ::libc::c_uint = 3;
pub const __IFLA_IPOIB_MAX: ::libc::c_uint = 4;
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const IPOIB_MODE_DATAGRAM: ::libc::c_uint = 0;
pub const IPOIB_MODE_CONNECTED: ::libc::c_uint = 1;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const IFLA_HSR_UNSPEC: ::libc::c_uint = 0;
pub const IFLA_HSR_SLAVE1: ::libc::c_uint = 1;
pub const IFLA_HSR_SLAVE2: ::libc::c_uint = 2;
pub const IFLA_HSR_MULTICAST_SPEC: ::libc::c_uint = 3;
pub const IFLA_HSR_SUPERVISION_ADDR: ::libc::c_uint = 4;
pub const IFLA_HSR_SEQ_NR: ::libc::c_uint = 5;
pub const __IFLA_HSR_MAX: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifaddrmsg {
    pub ifa_family: __u8,
    pub ifa_prefixlen: __u8,
    pub ifa_flags: __u8,
    pub ifa_scope: __u8,
    pub ifa_index: __u32,
}
impl ::std::clone::Clone for Struct_ifaddrmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifaddrmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed25 = ::libc::c_uint;
pub const IFA_UNSPEC: ::libc::c_uint = 0;
pub const IFA_ADDRESS: ::libc::c_uint = 1;
pub const IFA_LOCAL: ::libc::c_uint = 2;
pub const IFA_LABEL: ::libc::c_uint = 3;
pub const IFA_BROADCAST: ::libc::c_uint = 4;
pub const IFA_ANYCAST: ::libc::c_uint = 5;
pub const IFA_CACHEINFO: ::libc::c_uint = 6;
pub const IFA_MULTICAST: ::libc::c_uint = 7;
pub const __IFA_MAX: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifa_cacheinfo {
    pub ifa_prefered: __u32,
    pub ifa_valid: __u32,
    pub cstamp: __u32,
    pub tstamp: __u32,
}
impl ::std::clone::Clone for Struct_ifa_cacheinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifa_cacheinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ndmsg {
    pub ndm_family: __u8,
    pub ndm_pad1: __u8,
    pub ndm_pad2: __u16,
    pub ndm_ifindex: __s32,
    pub ndm_state: __u16,
    pub ndm_flags: __u8,
    pub ndm_type: __u8,
}
impl ::std::clone::Clone for Struct_ndmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ndmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const NDA_UNSPEC: ::libc::c_uint = 0;
pub const NDA_DST: ::libc::c_uint = 1;
pub const NDA_LLADDR: ::libc::c_uint = 2;
pub const NDA_CACHEINFO: ::libc::c_uint = 3;
pub const NDA_PROBES: ::libc::c_uint = 4;
pub const NDA_VLAN: ::libc::c_uint = 5;
pub const NDA_PORT: ::libc::c_uint = 6;
pub const NDA_VNI: ::libc::c_uint = 7;
pub const NDA_IFINDEX: ::libc::c_uint = 8;
pub const __NDA_MAX: ::libc::c_uint = 9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nda_cacheinfo {
    pub ndm_confirmed: __u32,
    pub ndm_used: __u32,
    pub ndm_updated: __u32,
    pub ndm_refcnt: __u32,
}
impl ::std::clone::Clone for Struct_nda_cacheinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nda_cacheinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ndt_stats {
    pub ndts_allocs: __u64,
    pub ndts_destroys: __u64,
    pub ndts_hash_grows: __u64,
    pub ndts_res_failed: __u64,
    pub ndts_lookups: __u64,
    pub ndts_hits: __u64,
    pub ndts_rcv_probes_mcast: __u64,
    pub ndts_rcv_probes_ucast: __u64,
    pub ndts_periodic_gc_runs: __u64,
    pub ndts_forced_gc_runs: __u64,
}
impl ::std::clone::Clone for Struct_ndt_stats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ndt_stats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed27 = ::libc::c_uint;
pub const NDTPA_UNSPEC: ::libc::c_uint = 0;
pub const NDTPA_IFINDEX: ::libc::c_uint = 1;
pub const NDTPA_REFCNT: ::libc::c_uint = 2;
pub const NDTPA_REACHABLE_TIME: ::libc::c_uint = 3;
pub const NDTPA_BASE_REACHABLE_TIME: ::libc::c_uint = 4;
pub const NDTPA_RETRANS_TIME: ::libc::c_uint = 5;
pub const NDTPA_GC_STALETIME: ::libc::c_uint = 6;
pub const NDTPA_DELAY_PROBE_TIME: ::libc::c_uint = 7;
pub const NDTPA_QUEUE_LEN: ::libc::c_uint = 8;
pub const NDTPA_APP_PROBES: ::libc::c_uint = 9;
pub const NDTPA_UCAST_PROBES: ::libc::c_uint = 10;
pub const NDTPA_MCAST_PROBES: ::libc::c_uint = 11;
pub const NDTPA_ANYCAST_DELAY: ::libc::c_uint = 12;
pub const NDTPA_PROXY_DELAY: ::libc::c_uint = 13;
pub const NDTPA_PROXY_QLEN: ::libc::c_uint = 14;
pub const NDTPA_LOCKTIME: ::libc::c_uint = 15;
pub const NDTPA_QUEUE_LENBYTES: ::libc::c_uint = 16;
pub const __NDTPA_MAX: ::libc::c_uint = 17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ndtmsg {
    pub ndtm_family: __u8,
    pub ndtm_pad1: __u8,
    pub ndtm_pad2: __u16,
}
impl ::std::clone::Clone for Struct_ndtmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ndtmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ndt_config {
    pub ndtc_key_len: __u16,
    pub ndtc_entry_size: __u16,
    pub ndtc_entries: __u32,
    pub ndtc_last_flush: __u32,
    pub ndtc_last_rand: __u32,
    pub ndtc_hash_rnd: __u32,
    pub ndtc_hash_mask: __u32,
    pub ndtc_hash_chain_gc: __u32,
    pub ndtc_proxy_qlen: __u32,
}
impl ::std::clone::Clone for Struct_ndt_config {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ndt_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const NDTA_UNSPEC: ::libc::c_uint = 0;
pub const NDTA_NAME: ::libc::c_uint = 1;
pub const NDTA_THRESH1: ::libc::c_uint = 2;
pub const NDTA_THRESH2: ::libc::c_uint = 3;
pub const NDTA_THRESH3: ::libc::c_uint = 4;
pub const NDTA_CONFIG: ::libc::c_uint = 5;
pub const NDTA_PARMS: ::libc::c_uint = 6;
pub const NDTA_STATS: ::libc::c_uint = 7;
pub const NDTA_GC_INTERVAL: ::libc::c_uint = 8;
pub const __NDTA_MAX: ::libc::c_uint = 9;
pub type Enum_Unnamed29 = ::libc::c_uint;
pub const RTM_BASE: ::libc::c_uint = 16;
pub const RTM_NEWLINK: ::libc::c_uint = 16;
pub const RTM_DELLINK: ::libc::c_uint = 17;
pub const RTM_GETLINK: ::libc::c_uint = 18;
pub const RTM_SETLINK: ::libc::c_uint = 19;
pub const RTM_NEWADDR: ::libc::c_uint = 20;
pub const RTM_DELADDR: ::libc::c_uint = 21;
pub const RTM_GETADDR: ::libc::c_uint = 22;
pub const RTM_NEWROUTE: ::libc::c_uint = 24;
pub const RTM_DELROUTE: ::libc::c_uint = 25;
pub const RTM_GETROUTE: ::libc::c_uint = 26;
pub const RTM_NEWNEIGH: ::libc::c_uint = 28;
pub const RTM_DELNEIGH: ::libc::c_uint = 29;
pub const RTM_GETNEIGH: ::libc::c_uint = 30;
pub const RTM_NEWRULE: ::libc::c_uint = 32;
pub const RTM_DELRULE: ::libc::c_uint = 33;
pub const RTM_GETRULE: ::libc::c_uint = 34;
pub const RTM_NEWQDISC: ::libc::c_uint = 36;
pub const RTM_DELQDISC: ::libc::c_uint = 37;
pub const RTM_GETQDISC: ::libc::c_uint = 38;
pub const RTM_NEWTCLASS: ::libc::c_uint = 40;
pub const RTM_DELTCLASS: ::libc::c_uint = 41;
pub const RTM_GETTCLASS: ::libc::c_uint = 42;
pub const RTM_NEWTFILTER: ::libc::c_uint = 44;
pub const RTM_DELTFILTER: ::libc::c_uint = 45;
pub const RTM_GETTFILTER: ::libc::c_uint = 46;
pub const RTM_NEWACTION: ::libc::c_uint = 48;
pub const RTM_DELACTION: ::libc::c_uint = 49;
pub const RTM_GETACTION: ::libc::c_uint = 50;
pub const RTM_NEWPREFIX: ::libc::c_uint = 52;
pub const RTM_GETMULTICAST: ::libc::c_uint = 58;
pub const RTM_GETANYCAST: ::libc::c_uint = 62;
pub const RTM_NEWNEIGHTBL: ::libc::c_uint = 64;
pub const RTM_GETNEIGHTBL: ::libc::c_uint = 66;
pub const RTM_SETNEIGHTBL: ::libc::c_uint = 67;
pub const RTM_NEWNDUSEROPT: ::libc::c_uint = 68;
pub const RTM_NEWADDRLABEL: ::libc::c_uint = 72;
pub const RTM_DELADDRLABEL: ::libc::c_uint = 73;
pub const RTM_GETADDRLABEL: ::libc::c_uint = 74;
pub const RTM_GETDCB: ::libc::c_uint = 78;
pub const RTM_SETDCB: ::libc::c_uint = 79;
pub const RTM_NEWNETCONF: ::libc::c_uint = 80;
pub const RTM_GETNETCONF: ::libc::c_uint = 82;
pub const RTM_NEWMDB: ::libc::c_uint = 84;
pub const RTM_DELMDB: ::libc::c_uint = 85;
pub const RTM_GETMDB: ::libc::c_uint = 86;
pub const __RTM_MAX: ::libc::c_uint = 87;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtattr {
    pub rta_len: ::libc::c_ushort,
    pub rta_type: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct_rtattr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtattr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtmsg {
    pub rtm_family: ::libc::c_uchar,
    pub rtm_dst_len: ::libc::c_uchar,
    pub rtm_src_len: ::libc::c_uchar,
    pub rtm_tos: ::libc::c_uchar,
    pub rtm_table: ::libc::c_uchar,
    pub rtm_protocol: ::libc::c_uchar,
    pub rtm_scope: ::libc::c_uchar,
    pub rtm_type: ::libc::c_uchar,
    pub rtm_flags: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_rtmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const RTN_UNSPEC: ::libc::c_uint = 0;
pub const RTN_UNICAST: ::libc::c_uint = 1;
pub const RTN_LOCAL: ::libc::c_uint = 2;
pub const RTN_BROADCAST: ::libc::c_uint = 3;
pub const RTN_ANYCAST: ::libc::c_uint = 4;
pub const RTN_MULTICAST: ::libc::c_uint = 5;
pub const RTN_BLACKHOLE: ::libc::c_uint = 6;
pub const RTN_UNREACHABLE: ::libc::c_uint = 7;
pub const RTN_PROHIBIT: ::libc::c_uint = 8;
pub const RTN_THROW: ::libc::c_uint = 9;
pub const RTN_NAT: ::libc::c_uint = 10;
pub const RTN_XRESOLVE: ::libc::c_uint = 11;
pub const __RTN_MAX: ::libc::c_uint = 12;
pub type Enum_rt_scope_t = ::libc::c_uint;
pub const RT_SCOPE_UNIVERSE: ::libc::c_uint = 0;
pub const RT_SCOPE_SITE: ::libc::c_uint = 200;
pub const RT_SCOPE_LINK: ::libc::c_uint = 253;
pub const RT_SCOPE_HOST: ::libc::c_uint = 254;
pub const RT_SCOPE_NOWHERE: ::libc::c_uint = 255;
pub type Enum_rt_class_t = ::libc::c_uint;
pub const RT_TABLE_UNSPEC: ::libc::c_uint = 0;
pub const RT_TABLE_COMPAT: ::libc::c_uint = 252;
pub const RT_TABLE_DEFAULT: ::libc::c_uint = 253;
pub const RT_TABLE_MAIN: ::libc::c_uint = 254;
pub const RT_TABLE_LOCAL: ::libc::c_uint = 255;
pub const RT_TABLE_MAX: ::libc::c_uint = -1;
pub type Enum_rtattr_type_t = ::libc::c_uint;
pub const RTA_UNSPEC: ::libc::c_uint = 0;
pub const RTA_DST: ::libc::c_uint = 1;
pub const RTA_SRC: ::libc::c_uint = 2;
pub const RTA_IIF: ::libc::c_uint = 3;
pub const RTA_OIF: ::libc::c_uint = 4;
pub const RTA_GATEWAY: ::libc::c_uint = 5;
pub const RTA_PRIORITY: ::libc::c_uint = 6;
pub const RTA_PREFSRC: ::libc::c_uint = 7;
pub const RTA_METRICS: ::libc::c_uint = 8;
pub const RTA_MULTIPATH: ::libc::c_uint = 9;
pub const RTA_PROTOINFO: ::libc::c_uint = 10;
pub const RTA_FLOW: ::libc::c_uint = 11;
pub const RTA_CACHEINFO: ::libc::c_uint = 12;
pub const RTA_SESSION: ::libc::c_uint = 13;
pub const RTA_MP_ALGO: ::libc::c_uint = 14;
pub const RTA_TABLE: ::libc::c_uint = 15;
pub const RTA_MARK: ::libc::c_uint = 16;
pub const RTA_MFC_STATS: ::libc::c_uint = 17;
pub const __RTA_MAX: ::libc::c_uint = 18;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtnexthop {
    pub rtnh_len: ::libc::c_ushort,
    pub rtnh_flags: ::libc::c_uchar,
    pub rtnh_hops: ::libc::c_uchar,
    pub rtnh_ifindex: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_rtnexthop {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtnexthop {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rta_cacheinfo {
    pub rta_clntref: __u32,
    pub rta_lastuse: __u32,
    pub rta_expires: __s32,
    pub rta_error: __u32,
    pub rta_used: __u32,
    pub rta_id: __u32,
    pub rta_ts: __u32,
    pub rta_tsage: __u32,
}
impl ::std::clone::Clone for Struct_rta_cacheinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rta_cacheinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const RTAX_UNSPEC: ::libc::c_uint = 0;
pub const RTAX_LOCK: ::libc::c_uint = 1;
pub const RTAX_MTU: ::libc::c_uint = 2;
pub const RTAX_WINDOW: ::libc::c_uint = 3;
pub const RTAX_RTT: ::libc::c_uint = 4;
pub const RTAX_RTTVAR: ::libc::c_uint = 5;
pub const RTAX_SSTHRESH: ::libc::c_uint = 6;
pub const RTAX_CWND: ::libc::c_uint = 7;
pub const RTAX_ADVMSS: ::libc::c_uint = 8;
pub const RTAX_REORDERING: ::libc::c_uint = 9;
pub const RTAX_HOPLIMIT: ::libc::c_uint = 10;
pub const RTAX_INITCWND: ::libc::c_uint = 11;
pub const RTAX_FEATURES: ::libc::c_uint = 12;
pub const RTAX_RTO_MIN: ::libc::c_uint = 13;
pub const RTAX_INITRWND: ::libc::c_uint = 14;
pub const RTAX_QUICKACK: ::libc::c_uint = 15;
pub const __RTAX_MAX: ::libc::c_uint = 16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rta_session {
    pub proto: __u8,
    pub pad1: __u8,
    pub pad2: __u16,
    pub u: Union_Unnamed32,
}
impl ::std::clone::Clone for Struct_rta_session {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rta_session {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed32 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed32 {
    pub unsafe fn ports(&mut self) -> *mut Struct_Unnamed33 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn icmpt(&mut self) -> *mut Struct_Unnamed34 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn spi(&mut self) -> *mut __u32 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub sport: __u16,
    pub dport: __u16,
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed34 {
    pub _type: __u8,
    pub code: __u8,
    pub ident: __u16,
}
impl ::std::clone::Clone for Struct_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rta_mfc_stats {
    pub mfcs_packets: __u64,
    pub mfcs_bytes: __u64,
    pub mfcs_wrong_if: __u64,
}
impl ::std::clone::Clone for Struct_rta_mfc_stats {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rta_mfc_stats {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rtgenmsg {
    pub rtgen_family: ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_rtgenmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rtgenmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ifinfomsg {
    pub ifi_family: ::libc::c_uchar,
    pub __ifi_pad: ::libc::c_uchar,
    pub ifi_type: ::libc::c_ushort,
    pub ifi_index: ::libc::c_int,
    pub ifi_flags: ::libc::c_uint,
    pub ifi_change: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_ifinfomsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ifinfomsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_prefixmsg {
    pub prefix_family: ::libc::c_uchar,
    pub prefix_pad1: ::libc::c_uchar,
    pub prefix_pad2: ::libc::c_ushort,
    pub prefix_ifindex: ::libc::c_int,
    pub prefix_type: ::libc::c_uchar,
    pub prefix_len: ::libc::c_uchar,
    pub prefix_flags: ::libc::c_uchar,
    pub prefix_pad3: ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_prefixmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_prefixmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed35 = ::libc::c_uint;
pub const PREFIX_UNSPEC: ::libc::c_uint = 0;
pub const PREFIX_ADDRESS: ::libc::c_uint = 1;
pub const PREFIX_CACHEINFO: ::libc::c_uint = 2;
pub const __PREFIX_MAX: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_prefix_cacheinfo {
    pub preferred_time: __u32,
    pub valid_time: __u32,
}
impl ::std::clone::Clone for Struct_prefix_cacheinfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_prefix_cacheinfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcmsg {
    pub tcm_family: ::libc::c_uchar,
    pub tcm__pad1: ::libc::c_uchar,
    pub tcm__pad2: ::libc::c_ushort,
    pub tcm_ifindex: ::libc::c_int,
    pub tcm_handle: __u32,
    pub tcm_parent: __u32,
    pub tcm_info: __u32,
}
impl ::std::clone::Clone for Struct_tcmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tcmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed36 = ::libc::c_uint;
pub const TCA_UNSPEC: ::libc::c_uint = 0;
pub const TCA_KIND: ::libc::c_uint = 1;
pub const TCA_OPTIONS: ::libc::c_uint = 2;
pub const TCA_STATS: ::libc::c_uint = 3;
pub const TCA_XSTATS: ::libc::c_uint = 4;
pub const TCA_RATE: ::libc::c_uint = 5;
pub const TCA_FCNT: ::libc::c_uint = 6;
pub const TCA_STATS2: ::libc::c_uint = 7;
pub const TCA_STAB: ::libc::c_uint = 8;
pub const __TCA_MAX: ::libc::c_uint = 9;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_nduseroptmsg {
    pub nduseropt_family: ::libc::c_uchar,
    pub nduseropt_pad1: ::libc::c_uchar,
    pub nduseropt_opts_len: ::libc::c_ushort,
    pub nduseropt_ifindex: ::libc::c_int,
    pub nduseropt_icmp_type: __u8,
    pub nduseropt_icmp_code: __u8,
    pub nduseropt_pad2: ::libc::c_ushort,
    pub nduseropt_pad3: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_nduseroptmsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_nduseroptmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed37 = ::libc::c_uint;
pub const NDUSEROPT_UNSPEC: ::libc::c_uint = 0;
pub const NDUSEROPT_SRCADDR: ::libc::c_uint = 1;
pub const __NDUSEROPT_MAX: ::libc::c_uint = 2;
pub type Enum_rtnetlink_groups = ::libc::c_uint;
pub const RTNLGRP_NONE: ::libc::c_uint = 0;
pub const RTNLGRP_LINK: ::libc::c_uint = 1;
pub const RTNLGRP_NOTIFY: ::libc::c_uint = 2;
pub const RTNLGRP_NEIGH: ::libc::c_uint = 3;
pub const RTNLGRP_TC: ::libc::c_uint = 4;
pub const RTNLGRP_IPV4_IFADDR: ::libc::c_uint = 5;
pub const RTNLGRP_IPV4_MROUTE: ::libc::c_uint = 6;
pub const RTNLGRP_IPV4_ROUTE: ::libc::c_uint = 7;
pub const RTNLGRP_IPV4_RULE: ::libc::c_uint = 8;
pub const RTNLGRP_IPV6_IFADDR: ::libc::c_uint = 9;
pub const RTNLGRP_IPV6_MROUTE: ::libc::c_uint = 10;
pub const RTNLGRP_IPV6_ROUTE: ::libc::c_uint = 11;
pub const RTNLGRP_IPV6_IFINFO: ::libc::c_uint = 12;
pub const RTNLGRP_DECnet_IFADDR: ::libc::c_uint = 13;
pub const RTNLGRP_NOP2: ::libc::c_uint = 14;
pub const RTNLGRP_DECnet_ROUTE: ::libc::c_uint = 15;
pub const RTNLGRP_DECnet_RULE: ::libc::c_uint = 16;
pub const RTNLGRP_NOP4: ::libc::c_uint = 17;
pub const RTNLGRP_IPV6_PREFIX: ::libc::c_uint = 18;
pub const RTNLGRP_IPV6_RULE: ::libc::c_uint = 19;
pub const RTNLGRP_ND_USEROPT: ::libc::c_uint = 20;
pub const RTNLGRP_PHONET_IFADDR: ::libc::c_uint = 21;
pub const RTNLGRP_PHONET_ROUTE: ::libc::c_uint = 22;
pub const RTNLGRP_DCB: ::libc::c_uint = 23;
pub const RTNLGRP_IPV4_NETCONF: ::libc::c_uint = 24;
pub const RTNLGRP_IPV6_NETCONF: ::libc::c_uint = 25;
pub const RTNLGRP_MDB: ::libc::c_uint = 26;
pub const __RTNLGRP_MAX: ::libc::c_uint = 27;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tcamsg {
    pub tca_family: ::libc::c_uchar,
    pub tca__pad1: ::libc::c_uchar,
    pub tca__pad2: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct_tcamsg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tcamsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
